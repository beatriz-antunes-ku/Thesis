import os
from collections import defaultdict
import pandas as pd
import numpy as np
from pyrosetta import *
from pyrosetta.rosetta.protocols.analysis import InterfaceAnalyzerMover

# === SETTINGS === #
input_folder = "./ddG/run"
wt_pdb_path = "./relax/output/output.pdb"
output_csv = "interaction_score.csv"
interface_str = "A_B" # e.g., "A_B", "AC_B", etc.
mutated_chain = "A"

# === Score Function === #
init(extra_options=(
  "-ex1 -ex2 "
  "-fa_max_dis 9.0 "
  "-beta_cart "
  "-missing_density_to_jump "
  "-relax:constrain_relax_to_start_coords "
  "-relax:coord_constrain_sidechains "
  "-relax:cartesian "
  "-score:weights beta_nov16_cart "
  "-relax:min_type lbfgs_armijo_nonmonotone "
  "-flip_HNQ "
  "-no_optH false "
))

scorefxn = create_score_function('beta_nov16_cart')

# === 3-letter to 1-letter amino acid code === #
aa3to1 = {
  'ALA': 'A', 'ARG': 'R', 'ASN': 'N', 'ASP': 'D',
  'CYS': 'C', 'GLN': 'Q', 'GLU': 'E', 'GLY': 'G',
  'HIS': 'H', 'ILE': 'I', 'LEU': 'L', 'LYS': 'K',
  'MET': 'M', 'PHE': 'F', 'PRO': 'P', 'SER': 'S',
  'THR': 'T', 'TRP': 'W', 'TYR': 'Y', 'VAL': 'V'
}

def get_interface_dG(pdb_path, interface_str):
  pose = pose_from_pdb(pdb_path)
  iam = InterfaceAnalyzerMover(interface_str)
  iam.set_scorefunction(scorefxn)
  iam.set_pack_separated(True)
  iam.set_pack_rounds(5)
  iam.apply(pose)
  return iam.get_interface_dG()

def get_wt_sequence(pdb_path, chain_id):
  pose = pose_from_pdb(pdb_path)
  pdb_info = pose.pdb_info()
  wt_seq = {}
  for i in range(1, pose.total_residue() + 1):
    if pdb_info.chain(i) == chain_id:
      pdb_res = pdb_info.number(i)
      resname = pose.residue(i).name3()
      one_letter = aa3to1.get(resname, 'X')
      wt_seq[pdb_res] = one_letter
  return wt_seq

# === Get WT dG and sequence === #
wt_dG = get_interface_dG(wt_pdb_path, interface_str)
wt_seq = get_wt_sequence(wt_pdb_path, mutated_chain)
print(f"Wildtype interface dG: {wt_dG:.2f}")

# === Process Mutant Files === #
ddg_data = defaultdict(list)

for file in os.listdir(input_folder):
  if file.startswith("MUT_") and file.endswith(".pdb"):
    file_path = os.path.join(input_folder, file)
    name_core = file.replace("MUT_", "").replace(".pdb", "")
    mutation_raw = name_core.split("_bj")[0]

    # Convert mutation to "WtPosMut"
    try:
      import re
      match = re.match(r"(\d+)([A-Z]{3})", mutation_raw)
      if not match:
        print(f"Skipped malformed mutation: {mutation_raw}")
        continue
      pos = int(match.group(1))
      mut_3 = match.group(2)
      wt_aa = wt_seq.get(pos, 'X')
      mut_aa = aa3to1.get(mut_3, 'X')
      if wt_aa == 'X' or mut_aa == 'X':
        print(f"Unknown residue code in mutation: {mutation_raw}")
        continue
      mutation_id = f"{wt_aa}{pos}{mut_aa}"
    except Exception as e:
      print(f"Error parsing mutation {mutation_raw}: {e}")
      continue

    try:
      dG = get_interface_dG(file_path, interface_str)
      ddg_data[mutation_id].append(dG)
    except Exception as e:
      print(f"Failed on {file}: {e}")

# === Calculate ddG === #
final_rows = []

for mutation, dG_list in ddg_data.items():
  if len(dG_list) == 0:
    continue
  mean_dG = np.mean(dG_list)
  ddG = round(mean_dG - wt_dG, 3)
  final_rows.append({"variant": mutation, "mean_dG": mean_dG, "ddG": ddG})

# === Save === #
df = pd.DataFrame(final_rows)
df.sort_values("ddG", inplace=True)
df.to_csv(output_csv, index=False)
print(f"Results saved to: {output_csv}")
